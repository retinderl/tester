-- ************************************* SqlDBM: BigQuery *************************************
-- * Generated by SqlDBM: Google Big Query Webinar, v49 vs Prod by retinder.labana@sqldbm.com *

CREATE SCHEMA ABC.operations
OPTIONS(is_case_insensitive = false);

CREATE SCHEMA mydataset
OPTIONS(is_case_insensitive = false);

CREATE VIEW mydataset.usa_male_names_new(name, number) AS (
SELECT id AS matching_rows
FROM Sequences
WHERE EXISTS(SELECT * FROM UNNEST(some_numbers) AS x WHERE x = 5)

);

CREATE VIEW mydataset.usa_male_names(name, number) AS (
SELECT id AS matching_rows
FROM Sequences
WHERE EXISTS(SELECT * FROM UNNEST(some_numbers) AS x WHERE x = 5)

);

ALTER TABLE operations.dim_supplier
ADD COLUMN created_by string OPTIONS(description = 'user who created the entery');

ALTER TABLE operations.dim_supplier
ADD COLUMN created_on timestamp OPTIONS(description = 'timestamps when the entry was created');

ALTER TABLE operations.dim_supplier
 SET OPTIONS(
description = 'supplier information',
friendly_name = 'supplier');

ALTER TABLE operations.fact_inventory
ADD COLUMN created_by string OPTIONS(description = 'user who created the entery');

ALTER TABLE operations.fact_inventory
ADD COLUMN created_on timestamp OPTIONS(description = 'timestamps when the entry was created');

ALTER TABLE operations.fact_inventory
 SET OPTIONS(
friendly_name = 'inventory');

ALTER TABLE operations.dim_category
ADD COLUMN created_by string OPTIONS(description = 'user who created the entery');

ALTER TABLE operations.dim_category
ADD COLUMN created_on timestamp OPTIONS(description = 'timestamps when the entry was created');

ALTER TABLE operations.dim_category
ALTER COLUMN category_name SET OPTIONS(
description = 'name of the category');

ALTER TABLE operations.dim_category
ALTER COLUMN description SET OPTIONS(
description = 'description for the category');

ALTER TABLE operations.dim_category
 SET OPTIONS(
description = 'Category list and it''s details',
friendly_name = 'category');

ALTER TABLE operations.dim_channel
ADD COLUMN created_by string OPTIONS(description = 'user who created the entery');

ALTER TABLE operations.dim_channel
ADD COLUMN created_on timestamp OPTIONS(description = 'timestamps when the entry was created');

ALTER TABLE operations.dim_channel
 SET OPTIONS(
description = 'Channel list and locations',
friendly_name = 'channel');

ALTER TABLE operations.dim_customer
ADD COLUMN created_by string OPTIONS(description = 'user who created the entery');

ALTER TABLE operations.dim_customer
ADD COLUMN created_on timestamp OPTIONS(description = 'timestamps when the entry was created');

ALTER TABLE operations.dim_customer
 SET OPTIONS(
description = 'Customer information',
friendly_name = 'customer');

ALTER TABLE operations.dim_time
ADD COLUMN created_by string OPTIONS(description = 'user who created the entery');

ALTER TABLE operations.dim_time
ADD COLUMN created_on timestamp OPTIONS(description = 'timestamps when the entry was created');

ALTER TABLE operations.dim_time
 SET OPTIONS(
friendly_name = 'time');

ALTER TABLE operations.fact_sales
ADD COLUMN created_by string OPTIONS(description = 'user who created the entery');

ALTER TABLE operations.fact_sales
ADD COLUMN created_on timestamp OPTIONS(description = 'timestamps when the entry was created');

ALTER TABLE operations.fact_sales
 SET OPTIONS(
friendly_name = 'fact sales');

ALTER TABLE operations.dim_location
ADD COLUMN created_by string OPTIONS(description = 'user who created the entery');

ALTER TABLE operations.dim_location
ADD COLUMN created_on timestamp OPTIONS(description = 'timestamps when the entry was created');

ALTER TABLE operations.dim_location
 SET OPTIONS(
description = 'List of locations and it''s details',
friendly_name = 'location');

ALTER TABLE operations.dim_product
ADD COLUMN created_by string OPTIONS(description = 'user who created the entery');

ALTER TABLE operations.dim_product
ADD COLUMN created_on timestamp OPTIONS(description = 'timestamps when the entry was created');

ALTER TABLE operations.dim_product
 SET OPTIONS(
description = 'product list and its specs',
friendly_name = 'product');

ALTER TABLE operations.dim_employee
ADD COLUMN created_by string OPTIONS(description = 'user who created the entery');

ALTER TABLE operations.dim_employee
ADD COLUMN created_on timestamp OPTIONS(description = 'timestamps when the entry was created');

ALTER TABLE operations.dim_employee
 SET OPTIONS(
description = 'Employee List',
friendly_name = 'employee');

CREATE TABLE ABC.operations.dim_time
(
date          date,
hour          int64,
day_of_week   string,
time_segments struct<start_time time, end_time struct<start_time time, end_time array<struct<start_time time, end_time time>>>>,
created_by    string NOT NULL OPTIONS(description = 'user who created the entery'), 
created_on    timestamp NOT NULL OPTIONS(description = 'timestamps when the entry was created') 
)
OPTIONS(friendly_name = 'time');

CREATE TABLE ABC.operations.dim_supplier
(
supplier_id    int64,
supplier_name  string,
contact_person string,
address        struct<street string, city string, state string, country string>,
payment_terms  array<string>,
created_by     string NOT NULL OPTIONS(description = 'user who created the entery'), 
created_on     timestamp NOT NULL OPTIONS(description = 'timestamps when the entry was created') 
)
OPTIONS(friendly_name = 'supplier');

CREATE TABLE ABC.operations.dim_product
(
product_id   int64 NOT NULL PRIMARY KEY NOT ENFORCED,
product_name string,
category     string,
price        float64,
attributes   struct<weight float64, dimensions struct<length float64, width float64, height float64>>,
created_by   string NOT NULL OPTIONS(description = 'user who created the entery'), 
created_on   timestamp NOT NULL OPTIONS(description = 'timestamps when the entry was created') 
)
OPTIONS(friendly_name = 'product');

CREATE TABLE ABC.operations.dim_location
(
location_id int64 NOT NULL PRIMARY KEY NOT ENFORCED,
country     string,
city        string,
coordinates struct<latitude float64, longitude float64>,
created_by  string NOT NULL OPTIONS(description = 'user who created the entery'), 
created_on  timestamp NOT NULL OPTIONS(description = 'timestamps when the entry was created') 
)
OPTIONS(friendly_name = 'location');

CREATE TABLE ABC.operations.dim_employee
(
employee_id   int64 NOT NULL PRIMARY KEY NOT ENFORCED,
employee_name string,
role          string,
skills        array<string>,
created_by    string NOT NULL OPTIONS(description = 'user who created the entery'), 
created_on    timestamp NOT NULL OPTIONS(description = 'timestamps when the entry was created') 
)
OPTIONS(friendly_name = 'dim employee');

CREATE TABLE ABC.operations.dim_customer
(
customer_id   int64 NOT NULL PRIMARY KEY NOT ENFORCED,
customer_name string,
email         string,
address       string,
contact_info  struct<phone_number string, social_media array<string>>,
created_by    string NOT NULL OPTIONS(description = 'user who created the entery'), 
created_on    timestamp NOT NULL OPTIONS(description = 'timestamps when the entry was created') 
)
 PARTITION BY  RANGE_BUCKET(customer_id, GENERATE_ARRAY(1, 1000, 50)) 
OPTIONS(expiration_timestamp = 2025-02-03 12:34:56,
require_partition_filter = true,
friendly_name = 'customer');

CREATE TABLE ABC.operations.dim_channel
(
channel_id   int64 NOT NULL PRIMARY KEY NOT ENFORCED,
channel_name string,
demographics struct<age int64, gender struct<age int64, gender array<struct<age int64, gender string>>>>,
created_by   string NOT NULL OPTIONS(description = 'user who created the entery'), 
created_on   timestamp NOT NULL OPTIONS(description = 'timestamps when the entry was created') 
)
OPTIONS(friendly_name = 'channel');

CREATE TABLE ABC.operations.dim_category
(
category_id   int64 NOT NULL PRIMARY KEY NOT ENFORCED,
category_name string,
description   string,
subcategories array<string>,
created_by    string NOT NULL OPTIONS(description = 'user who created the entery'), 
created_on    timestamp NOT NULL OPTIONS(description = 'timestamps when the entry was created') 
)
OPTIONS(friendly_name = 'category');

CREATE TABLE ABC.operations.fact_sales
(
sale_id     int64 NOT NULL PRIMARY KEY NOT ENFORCED,
quantity    int64,
price       float64,
customer_id int64,
product_id  int64,
created_by  string NOT NULL OPTIONS(description = 'user who created the entery'), 
created_on  timestamp NOT NULL OPTIONS(description = 'timestamps when the entry was created') 
 CONSTRAINT FK_fact_sales_1 FOREIGN KEY (customer_id) REFERENCES ABC.operations.dim_customer (customer_id) NOT ENFORCED,
 CONSTRAINT FK_fact_sales_2 FOREIGN KEY (product_id) REFERENCES ABC.operations.dim_product (product_id) NOT ENFORCED
)
OPTIONS(friendly_name = 'sales');

CREATE TABLE ABC.operations.fact_inventory
(
inventory_id int64 NOT NULL PRIMARY KEY NOT ENFORCED,
quantity     int64,
location_id  int64,
product_id   int64,
created_by   string NOT NULL OPTIONS(description = 'user who created the entery'), 
created_on   timestamp NOT NULL OPTIONS(description = 'timestamps when the entry was created') 
 CONSTRAINT FK_fact_inventory_2 FOREIGN KEY (location_id) REFERENCES ABC.operations.dim_location (location_id) NOT ENFORCED,
 CONSTRAINT FK_fact_inventory_1 FOREIGN KEY (product_id) REFERENCES ABC.operations.dim_product (product_id) NOT ENFORCED
)
OPTIONS(friendly_name = 'inventory');